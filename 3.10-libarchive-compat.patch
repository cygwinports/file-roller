--- origsrc/file-roller-3.10.2.1/configure.ac	2014-05-07 20:32:05.020025200 -0500
+++ src/file-roller-3.10.2.1/configure.ac	2014-05-07 20:27:57.330572700 -0500
@@ -25,7 +25,7 @@ GTK_REQUIRED=3.9.3
 NAUTILUS_REQUIRED=2.22.2
 JSON_GLIB_REQUIRED=0.14.0
 LIBNOTIFY_REQUIRED=0.4.3
-LIBARCHIVE_REQUIRED=3.0.0
+LIBARCHIVE_REQUIRED=2.8.0
 
 dnl ===========================================================================
 
--- origsrc/file-roller-3.10.2.1/src/fr-archive-libarchive.c	2014-05-07 20:32:05.023525700 -0500
+++ src/file-roller-3.10.2.1/src/fr-archive-libarchive.c	2014-05-07 20:49:58.838382900 -0500
@@ -68,18 +68,14 @@ fr_archive_libarchive_finalize (GObject
 
 const char *libarchiver_mime_types[] = {
 		"application/vnd.ms-cab-compressed",
-		"application/x-7z-compressed",
 		"application/x-ar",
-		"application/x-cd-image",
 		"application/x-compressed-tar",
 		"application/x-cpio",
 		"application/x-bzip-compressed-tar",
 		"application/x-lha",
-		"application/x-lzip-compressed-tar",
 		"application/x-lzma-compressed-tar",
 		"application/x-tar",
 		"application/x-tarz",
-		"application/x-xar",
 		"application/x-xz-compressed-tar",
 		NULL };
 
@@ -100,12 +96,6 @@ fr_archive_libarchive_get_capabilities (
 
 	capabilities = FR_ARCHIVE_CAN_STORE_MANY_FILES;
 
-	/* write-only formats */
-	if (strcmp (mime_type, "application/x-7z-compressed") == 0) {
-		capabilities |= FR_ARCHIVE_CAN_WRITE;
-		return capabilities;
-	}
-
 	/* give priority to 7za that supports CAB files better. */
 	if ((strcmp (mime_type, "application/vnd.ms-cab-compressed") == 0)
 	    && _g_program_is_available ("7za", check_command))
@@ -301,7 +291,7 @@ list_archive_thread (GSimpleAsyncResult
 					     _g_file_get_size (fr_archive_get_file (load_data->archive), cancellable));
 
 	a = archive_read_new ();
-	archive_read_support_filter_all (a);
+	archive_read_support_compression_all (a);
 	archive_read_support_format_all (a);
 	archive_read_open (a, load_data, load_data_open, load_data_read, load_data_close);
 	while ((r = archive_read_next_header (a, &entry)) == ARCHIVE_OK) {
@@ -353,7 +343,7 @@ list_archive_thread (GSimpleAsyncResult
 
 		archive_read_data_skip (a);
 	}
-	archive_read_free (a);
+	archive_read_finish (a);
 
 	if ((load_data->error == NULL) && (r != ARCHIVE_EOF) && (archive_error_string (a) != NULL))
 		load_data->error = _g_error_new_from_archive_error (archive_error_string (a));
@@ -573,7 +563,7 @@ extract_archive_thread (GSimpleAsyncResu
 	fr_archive_progress_set_total_files (load_data->archive, extract_data->n_files_to_extract);
 
 	a = archive_read_new ();
-	archive_read_support_filter_all (a);
+	archive_read_support_compression_all (a);
 	archive_read_support_format_all (a);
 	archive_read_open (a, load_data, load_data_open, load_data_read, load_data_close);
 	while ((r = archive_read_next_header (a, &entry)) == ARCHIVE_OK) {
@@ -834,7 +824,7 @@ extract_archive_thread (GSimpleAsyncResu
 	g_hash_table_unref (folders_created_during_extraction);
 	g_hash_table_unref (created_folders);
 	g_hash_table_unref (checked_folders);
-	archive_read_free (a);
+	archive_read_finish (a);
 	extract_data_free (extract_data);
 }
 
@@ -1075,75 +1065,59 @@ _archive_write_set_format_from_context (
 	/* set format and filter from the mime type */
 
 	mime_type = fr_archive_get_mime_type (LOAD_DATA (save_data)->archive);
-	archive_filter = ARCHIVE_FILTER_NONE;
+	archive_filter = ARCHIVE_COMPRESSION_NONE;
 
 	if (_g_str_equal (mime_type, "application/x-bzip-compressed-tar")) {
 		archive_write_set_format_pax_restricted (a);
-		archive_filter = ARCHIVE_FILTER_BZIP2;
+		archive_filter = ARCHIVE_COMPRESSION_BZIP2;
 	}
 	else if (_g_str_equal (mime_type, "application/x-tarz")) {
 		archive_write_set_format_pax_restricted (a);
-		archive_filter = ARCHIVE_FILTER_COMPRESS;
+		archive_filter = ARCHIVE_COMPRESSION_COMPRESS;
 	}
 	else if (_g_str_equal (mime_type, "application/x-compressed-tar")) {
 		archive_write_set_format_pax_restricted (a);
-		archive_filter = ARCHIVE_FILTER_GZIP;
-	}
-	else if (_g_str_equal (mime_type, "application/x-lzip-compressed-tar")) {
-		archive_write_set_format_pax_restricted (a);
-		archive_filter = ARCHIVE_FILTER_LZIP;
+		archive_filter = ARCHIVE_COMPRESSION_GZIP;
 	}
 	else if (_g_str_equal (mime_type, "application/x-lzma-compressed-tar")) {
 		archive_write_set_format_pax_restricted (a);
-		archive_filter = ARCHIVE_FILTER_LZMA;
+		archive_filter = ARCHIVE_COMPRESSION_LZMA;
 	}
 	else if (_g_str_equal (mime_type, "application/x-xz-compressed-tar")) {
 		archive_write_set_format_pax_restricted (a);
-		archive_filter = ARCHIVE_FILTER_XZ;
+		archive_filter = ARCHIVE_COMPRESSION_XZ;
 	}
 	else if (_g_str_equal (mime_type, "application/x-tar")) {
-		archive_write_add_filter_none (a);
+		archive_write_set_compression_none (a);
 		archive_write_set_format_pax_restricted (a);
 	}
-	else if (_g_str_equal (mime_type, "application/x-cd-image")) {
-		archive_write_set_format_iso9660 (a);
-	}
 	else if (_g_str_equal (mime_type, "application/x-cpio")) {
 		archive_write_set_format_cpio (a);
 	}
-	else if (_g_str_equal (mime_type, "application/x-xar")) {
-		archive_write_set_format_xar (a);
-	}
 	else if (_g_str_equal (mime_type, "application/x-ar")) {
 		archive_write_set_format_ar_svr4 (a);
 	}
-	else if (_g_str_equal (mime_type, "application/x-7z-compressed")) {
-		archive_write_set_format_7zip (a);
-	}
 
 	/* set the filter */
 
-	if (archive_filter != ARCHIVE_FILTER_NONE) {
+	if (archive_filter != ARCHIVE_COMPRESSION_NONE) {
 		char *compression_level = NULL;
 
 		switch (archive_filter) {
-		case ARCHIVE_FILTER_BZIP2:
-			archive_write_add_filter_bzip2 (a);
-			break;
-		case ARCHIVE_FILTER_COMPRESS:
-			archive_write_add_filter_compress (a);
+		case ARCHIVE_COMPRESSION_BZIP2:
+			archive_write_set_compression_bzip2 (a);
 			break;
-		case ARCHIVE_FILTER_GZIP:
-			archive_write_add_filter_gzip (a);
+		case ARCHIVE_COMPRESSION_COMPRESS:
+			archive_write_set_compression_compress (a);
 			break;
-		case ARCHIVE_FILTER_LZIP:
-			archive_write_add_filter_lzip (a);
+		case ARCHIVE_COMPRESSION_GZIP:
+			archive_write_set_compression_gzip (a);
 			break;
-		case ARCHIVE_FILTER_LZMA:
-			archive_write_add_filter_lzma (a);
+		case ARCHIVE_COMPRESSION_LZMA:
+			archive_write_set_compression_lzma (a);
 			break;
-		case ARCHIVE_FILTER_XZ:
-			archive_write_add_filter_xz (a);
+		case ARCHIVE_COMPRESSION_XZ:
+			archive_write_set_compression_xz (a);
 			break;
 		default:
 			break;
@@ -1154,20 +1128,20 @@ _archive_write_set_format_from_context (
 		compression_level = NULL;
 		switch (save_data->compression) {
 		case FR_COMPRESSION_VERY_FAST:
-			compression_level = "1";
+			compression_level = "compression-level=1";
 			break;
 		case FR_COMPRESSION_FAST:
-			compression_level = "3";
+			compression_level = "compression-level=3";
 			break;
 		case FR_COMPRESSION_NORMAL:
-			compression_level = "6";
+			compression_level = "compression-level=6";
 			break;
 		case FR_COMPRESSION_MAXIMUM:
-			compression_level = "9";
+			compression_level = "compression-level=9";
 			break;
 		}
 		if (compression_level != NULL)
-			archive_write_set_filter_option (a, NULL, "compression-level", compression_level);
+			archive_write_set_compressor_options (a, compression_level);
 	}
 }
 
@@ -1357,7 +1331,7 @@ save_archive_thread (GSimpleAsyncResult
 	archive_write_set_bytes_in_last_block (b, 1);
 
 	a = archive_read_new ();
-	archive_read_support_filter_all (a);
+	archive_read_support_compression_all (a);
 	archive_read_support_format_all (a);
 	archive_read_open (a, load_data, load_data_open, load_data_read, load_data_close);
 
@@ -1429,8 +1403,8 @@ save_archive_thread (GSimpleAsyncResult
 	if (load_data->error != NULL)
 		g_simple_async_result_set_from_error (result, load_data->error);
 
-	archive_read_free (a);
-	archive_write_free (b);
+	archive_read_finish (a);
+	archive_write_finish (b);
 	save_data_free (save_data);
 }
 
